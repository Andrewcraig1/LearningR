library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("KernSmooth")
add2 <- function(x,y) {
x+y
}
add2(3+5)
add2(3,5)
f<-function(x) {
g<-function(y) {
y+z
}
z<-4
x+g(x)
}
z<-10
f<-function(x) {
g<-function(y) {
y+z
}
z<-10
x+g(x)
}
f(3)
z<-2
f(3)
x<-5
y<-if(x<3) {NA
}else{
10
}
y
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
f
f(3)
f<-function(x){
g<-function(y){
y+z
}
z<-10
x+g(x)
}
f(3)
f(3)
f<-function(x){
g<-function(y){
y+z
}
z<-10
x+g(x)
}
f(3)
get(wd)
getwd()
lst
ls()
cd()
clear()
file.path()
list.files
getwd
fileinfo()
file.info()
list.files
pwd
get.wd()
getwd()
list.dirs()
list.files
getwd(courseradatascience)
getwd(datasciencecoursera)
getwd(specdata)
swirl()
ElRancho_BookingNumbers_3 <- read.csv("~/Documents/ER/ElRancho_BookingNumbers_3.csv")
View(ElRancho_BookingNumbers_3)
rebooking <- read.csv("~/Documents/ER/ElRancho_BookingNumbers_3.csv")
View(rebooking)
head(rebooking)
table(rebooking$Group.Type)
plot(rebooking$Group.Type)
plot(rebooking$Group.Type,main='Bar chart of types of Groups',xlab='Group type',ylab='Frequency')
hist(rebooking$actualnumbers)
mean(rebooking$actualnumbers)
median(rebooking$actualnumbers)
mode(rebooking$actualnumbers)
mode(rebooking$actualnumbers)
sqrt(9)
sqrt(9)
sqrt(9)
median
?Mode
?Mode
sqrt(9)
sd(rebooking$actualnumbers)
x<-5
x+2
y<-x^2
y
sqrt(y)
myvariable<-c(72,28,12,11)
myvariable<-c(72,28,-9,12,11)
myvariable*3
sqrt(myvariable)
myvariable2<-myvariable*3
myvariable2
mean(myvariable)
length(myvariable)
sum(myvariable)
myvariable[2]
myvariable>0
myvariable[myvariable>0]
myvariable[myvariable==12]
myvariable[myvariable!=12]
x<-6+2
sqrt(x^2)
View(rebooking)
View(rebooking)
mean(rebooking$Nights)
sd(rebooking$Nights)
table(rebooking$Nights_freq)
table(rebooking$Booking.Type_freq)
table(rebooking$Lead.Source_freq)
plot(rebooking$Lead.Source)
table(rebooking$Lead.Source)
?table of extent 0 >
count(rebooking$Lead.Source)
count.fields(rebooking$Lead.Source)
cou
bookings<-2556
1364/bookings
table(rebooking$Group.Type)
402/bookings
1679/bookings
table(rebooking$actualnumbers_freq)
table(rebooking$actualnumbers)
1647/bookings
ERBooking <- read.csv("~/Documents/ER/ElRancho_BookingNumbers_3 - cleaned.csv")
View(ERBooking)
loans <- read.csv("~/Documents/MOOCs/Analytics Edge/Unit 3/Data/loans_imputed.csv")
View(loans)
cor(loans)
wd
dirname()
dirname(ER)
dir()
rm(x)
rm(z)
rm(y)
rm(my_div)
rm(my_sqrt)
rm(ERBooking)
setwd("~/Documents/MOOCs/Analytics Edge/Unit6")
StocksCluster <- read.csv("~/Documents/MOOCs/Analytics Edge/Unit6/StocksCluster.csv")
View(StocksCluster)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - stocks -normalisation of data.R')
stocks <- read.csv("~/Documents/MOOCs/Analytics Edge/Unit6/StocksCluster.csv")
View(stocks)
str(stocks)
table(stocks$PositiveDec)
6324 /(5256 + 6324)
cor(stocks)
max(cor(stocks))
table(stocks$PositiveDec, -PostiveDec)
table(stocks$PositiveDec, -stocks$PostiveDec)
summary(stocks)
max(mean(stocks))
mean(stocks)
mean(stocks)
summary(stocks)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
StocksModel<-glm(PositiveDec~ ., data=stocksTrain, family="binomial")
summary(StocksModel)
predStocks1<-predict(StocksModel,type="response")
table(stocksTrain$PositiveDec, pred1 >=0.5)
table(stocksTrain$PositiveDec, predStocks1 >=0.5)
990+3640(nrow(stocksTrain))
(990+3640)/(nrow(stocksTrain))
predStocksTest1<-predict(StocksModel,newdata = stocksTest, type="response")
table(stocksTrain$PositiveDec, predStocksTest1 >=0.5)
table(stocksTest$PositiveDec, predStocksTest1 >=0.5)
(417+1553)/(nrow(stocksTest))
table(stocksTest$PositiveDec)
1897/(1897+1577)
limitedTrain <- stocksTrain
limitedTrain$PositiveDec <- NULL
limitedTest <- stocksTest
limitedTest$PositiveDec <- NULL
library(caret)
preproc <- preProcess(limitedTrain)
normTrain <- predict(preproc, limitedTrain)
normTest <- predict(preproc, limitedTest)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - stocks -normalisation of data.R')
summary(normTrain)
summary(normTest)
km <- kmeans(healthyVector, centers = k, iter.max = 1000)
ntrainMatrix <- as.matrix(normTrain)
str(healthyMatrix)
str(ntrainMatrix)
ntrainMatrix <- as.matrix(normTrain)
ntrainVector <-as.vector(ntrainMatrix)
ntrainMatrix <- as.matrix(normTrain)
ntrainVector <-as.vector(ntrainMatrix)
set.seed(144)
k<-3
km <- kmeans(ntrainVector, centers = k, iter.max = 1000)
str(km)
km<-kmeans(normTrain, centres=3)
km<-kmeans(normTrain, centers=3)
str(km)
# or km$size
km$size
library(flexclust)
km.kcca <- as.kcca(km, normTrain)
clusterTrain <- predict(km.kcca)
clusterTest <- predict(km.kcca, newdata=normTest)
str(clusterTest)
clusterTest <- predict(km.kcca, newdata=normTest)
str(clusterTest)
summary(clusterTest)
str(clusterTest)
clusterTest$size
size(clusterTest)
table(clusterTest)
normTrain$km<-kmeans(normTrain, centers=3)
View(normTrain)
stocksTrain$cluster<-km
km
str(km)
stocksTrain$km<-km
stocksTrain1 <- subset(stocksTrain, clusterTrain == 1)
stocksTrain2 <- subset(stocksTrain, clusterTrain == 2)
stocksTrain3 <- subset(stocksTrain, clusterTrain == 3)
stocksTest1 <- subset(stocksTest, clusterTest == 1)
stocksTest2 <- subset(stocksTest, clusterTest == 2)
stocksTest3 <- subset(stocksTest, clusterTest == 3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - stocks -normalisation of data.R')
StocksModel1<-glm(PositiveDec~ ., data=stocksTrain1, family="binomial")
StocksModel1<-glm(PositiveDec~ ., data=stocksTrain1, family="binomial")
summary(StocksModel1)
StocksModel2<-glm(PositiveDec~ ., data=stocksTrain2, family="binomial")
summary(StocksModel2)
StocksModel3<-glm(PositiveDec~ ., data=stocksTrain3, family="binomial")
summary(StocksModel3)
predictTest1<-predict(StocksModel1,newdata=stocksTest1,type="response")
table(stocksTest1$PositiveDec, predictTest1 >=0.5)
(30+774)/(nrow(stocksTest1))
predictTest2<-predict(StocksModel2,newdata=stocksTest2,type="response")
table(stocksTest2$PositiveDec, predictTest2 >=0.5)
(388+626)/(nrow(stocksTest2))
(388+757)/(nrow(stocksTest2))
predictTest3<-predict(StocksModel3,newdata=stocksTest3,type="response")
table(stocksTes32$PositiveDec, predictTest3 >=0.5)
table(stocksTest3$PositiveDec, predictTest3 >=0.5)
(29+13)/(nrow(stocksTest3))
(49+13)/(nrow(stocksTest3))
AllPredictions <- c(PredictTest1, PredictTest2, PredictTest3)
AllPredictions <- c(predictTest1, predictTest2, predictTest3)
AllOutcomes <- c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(AllOutcomes,AllPredictions >=0.5)
(467+1544)/(467+1110+353+1544)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - stocks -normalisation of data.R')
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - stocks -normalisation of data.R')
dailykos <- read.csv("~/Documents/MOOCs/Analytics Edge/Unit6/dailykos.csv")
View(dailykos)
source('~/Documents/MOOCs/Analytics Edge/Unit6/Unit6_Netflix.R')
str(dailykos)
distances <- dist(dailykos, method = "euclidean")
clusterKos <- hclust(distances, method = "ward.D")
plot(clusterKos)
clusterGroups <- cutree(clusterKos, k = 7)
cluster1 <- subset(dailykos, clusterGroups==1)
cluster2 <- subset(dailykos, clusterGroups==2)
cluster3 <- subset(dailykos, clusterGroups==3)
cluster4 <- subset(dailykos, clusterGroups==4)
cluster5 <- subset(dailykos, clusterGroups==5)
cluster6 <- subset(dailykos, clusterGroups==6)
cluster7 <- subset(dailykos, clusterGroups==7)
str(cluster1)
summary(cluster1)
size(cluster1)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
set.seed(1000)
km<-kmeans(dailykos, centers=7)
table(km)
summary(km)
km$size
km$summary
table(km$cluster)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - Hierarchical & k-means clustering.R')
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
kmcluster1 <- subset(dailykos, km==1)
kmcluster2 <- subset(dailykos, km==2)
kmcluster3 <- subset(dailykos, km==3)
kmcluster4 <- subset(dailykos, km==4)
kmcluster5 <- subset(dailykos, km==5)
kmcluster6 <- subset(dailykos, km==6)
kmcluster7 <- subset(dailykos, km==7)
kmclusterGroups <- cutree(km, k = 7)
kmcluster1 <- subset(dailykos, km==1)
kmcluster1 <- subset(dailykos, km$cluster==1)
kmcluster1 <- subset(dailykos, km$cluster==1)
kmcluster2 <- subset(dailykos, km$cluster==2)
kmcluster3 <- subset(dailykos, km$cluster==3)
kmcluster4 <- subset(dailykos, km$cluster==4)
kmcluster5 <- subset(dailykos, km$cluster==5)
kmcluster6 <- subset(dailykos, km$cluster==6)
kmcluster7 <- subset(dailykos, km$cluster==7)
tail(sort(colMeans(kmcluster1)))
tail(sort(colMeans(kmcluster2)))
tail(sort(colMeans(kmcluster3)))
tail(sort(colMeans(kmcluster4)))
tail(sort(colMeans(kmcluster5)))
tail(sort(colMeans(kmcluster6)))
tail(sort(colMeans(kmcluster7)))
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - Hierarchical & k-means clustering.R')
tail(sort(colMeans(kmcluster2)))
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
tail(sort(colMeans(kmcluster3)))
tail(sort(colMeans(kmcluster7)))
tail(sort(colMeans(kmcluster7)))
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
tail(sort(colMeans(kmcluster7)))
tail(sort(colMeans(kmcluster6)))
tail(sort(colMeans(kmcluster7)))
tail(sort(colMeans(cluster4)))
table(clusterGroups, kmcluster$cluster)
table(clusterGroups, kmc$cluster)
table(clusterGroups, km$cluster)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign 1 - Hierarchical & k-means clustering.R')
airlines <- read.csv("~/Documents/MOOCs/Analytics Edge/Unit6/AirlinesCluster.csv")
View(airlines)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign2 Market Segmentation.R')
str(airlines)
summary(airlines)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign2 Market Segmentation.R')
library(caret)
preproc <- preProcess(airlines)
airlinesNorm <- predict(preproc, airlines)
summary(airlinesNorm)
distancesAN <- dist(airlinesNorm, method = "euclidean")
clusterAN <- hclust(distancesAN, method = "ward.D")
plot(clusterKos)
plot(clusterAN)
HierClusterGroups <- cutree(clusterAN, k = 5)
Hcluster1 <- subset(airlinesNorm, HierClusterGroups==1)
Hcluster2 <- subset(airlinesNorm, HierClusterGroups==2)
Hcluster3 <- subset(airlinesNorm, HierClusterGroups==3)
Hcluster4 <- subset(airlinesNorm, HierClusterGroups==4)
Hcluster5 <- subset(airlinesNorm, HierClusterGroups==5)
table(HierClusterGroups$cluster)
size$HierClusterGroups
summary(Hcluster1)
str(Hcluster1)
table(HierClusterGroups)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines$Balance, HierClusterGroups, mean)
names(airlines)
tapply(airlines$Balance, HierClusterGroups, mean)
tapply(airlines$QualMiles, HierClusterGroups, mean)
tapply(airlines$BonusMiles, HierClusterGroups, mean)
tapply(airlines$BonusTrans, HierClusterGroups, mean)
tapply(airlines$FlightMiles, HierClusterGroups, mean)
tapply(airlines$FlightTrans, HierClusterGroups, mean)
tapply(airlines$DaysSinceEnroll, HierClusterGroups, mean)
set.seed(88)
kmeansClust<-kmeans(airlinesNorm, centers=5, iter.max = 1000)
table(kmeansClust)
kmeansClust$size
kmeansClust$centers
table(HierClusterGroups, kmeansClust$cluster)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign2 Market Segmentation.R')
summary(airlinesNorm)
source('~/Documents/MOOCs/Analytics Edge/Unit6/U6 Assign2 Market Segmentation.R')
sqrt(108)
1^2
sqrt(12)
12*2^6
sqr(12*2^2)
sqrt(12*2^2)
sqrt(12*3^2)
sqrt(12*4^2)
sqrt(12*5^2)
1^2
3^7
sqrt(2187)
