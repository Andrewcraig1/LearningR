Cht 3 FUNCTIONAL PROGRAMMING

You already know how to use a for loop. The goal of this chapter is to teach you how to use the map functions in the purrr package which remove the code that's duplicated across multiple for loops. After completing this chapter you'll be able to solve new iteration problems with greater ease (faster and with fewer bugs).

-----------------------------------------------------------------------------------------
1. Using a for loop to remove duplication

Imagine we have a data frame called df:

df <- data.frame(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
We want to compute the median of each column. You could do this with copy and paste (df is available in your workspace, so go ahead and try it in the console):

median(df[[1]])
median(df[[2]])
median(df[[3]])
median(df[[4]])
But that's a lot of repetition! Let's start by seeing how we could reduce the duplication by using a for loop.
-------------
# Initialize output vector
output <- vector("double", ncol(df))  

# Fill in the body of the for loop
for (i in seq_along(df)) {            
  output[[i]] <- median(df[[i]])
}

# View the result
output

------------------------------------------------------

2. Turning the for loop into a function

Now, imagine you need to do this to another data frame df2. You copy and paste the for loop, and edit every reference to df to be df2 instead.

output <- vector("double", ncol(df2))  
for (i in seq_along(df2)) {            
  output[[i]] <- median(df2[[i]])      
}
output
And then you realize you have another data frame df3 for which you also want the column medians. You copy and paste...and realize you've copied and pasted two times. Time to write a function!
-------------
col_median<-function(x){
	output <- vector("double", ncol(df))  
		for (i in seq_along(x)) {            
  			output[[i]] <- median(x[[i]])      
    		}
    output
}

Hooray - got it!

-------------

What about column means?
100xp
What if instead of medians of every column you actually want means?

Let's write a col_mean() function that returns the vector of column means.

# Create col_mean() function to find column means
col_mean <- function(df) {
  output <- numeric(length(df))
  for (i in seq_along(df)) {
    output[[i]] <- mean(df[[i]])
  }
  output
}

-------------

What about column standard deviations?
100xp
You now have functions for column medians and means, what about one for standard deviations?

# Define col_sd() function
col_sd <- function(df) {
  output <- numeric(length(df))
  for (i in seq_along(df)) {
    output[[i]] <- sd(df[[i]])
  }
  output
}

-------------

Uh oh...time to write a function again

We just copied and pasted the function col_median two times. That's a sure sign we need to write a function. How can we write a function that will take column summaries for any summary function we provide?

we can remove the duplication in our set of summary functions by requiring the function doing the summary as an input. This leads to creating the col_summary function:

col_summary <- function(df, fun) {
  output <- vector("numeric", length(df))
  for (i in seq_along(df)) {
    output[[i]] <- fun(df[[i]])
  }
  output
}

col_summary(df,fun)


-------------
This is the same as what the sapply function does.

sapply(df, mean)
generates the same output as:
col_summary(df,mean)

-------------
Let's look at a simpler example first. Consider the functions f1(), f2() and f3() that take a vector x and return deviations from the mean value raised to the powers 1, 2, and 3 respectively:

f1 <- function(x) abs(x - mean(x)) ^ 1
f2 <- function(x) abs(x - mean(x)) ^ 2
f3 <- function(x) abs(x - mean(x)) ^ 3
How could you remove the duplication in this set of function definitions?

Hopefully, you would suggest writing a single function with two arguments: x and power. That way, one function reproduces all the functionality of f1(), f2() and f(3), and more.

# Add a second argument y called power
f <- function(x,y) {
    # Edit the body to return absolute deviations raised to power
    abs(x - mean(x))^(y)
}

------------------------------------------------------
USING  the map functions in the "purrr package"

Every map functio  works the same way.

  map_dbl( .x, .f, ...)

  1.Loop over vector .x
  2. Do something to each element .f
  3. Returns the result

  There is one map function for each type of vector:

  map() returns a list
  map_dbl() returns a double vector
  map_lgl() returns a logical vector
  map_int() returns an integer vector
  map_chr() returns a character vector


Advantages of the map functions in purrr
  - Handy short cuts for specifying .f for existing functions and those you have designed.

  - More consistent than Sapply() and lapply() which makes them for programming and therefore safer to programme with.
  - Takes much less time to solve iteration problems

Examples for an output of numeric vector.

n our case, every summary we calculated returned a single numeric value, so we'll use map_dbl().

> map_dbl(df,mean)
          a           b           c           d 
-0.07167858  0.22650317  0.43336465  0.81859936 

> map_dbl(df,median)
         a           b           c           d 
-0.14485699 -0.01285629  0.53653809  0.44705298 

> map_dbl(df,sd)
        a         b         c         d 
0.9031312 0.8984543 0.7142314 0.9568429 
> 

-------------
The ... "dot dot dot"  argument to the map functions

The map functions use the ... ("dot dot dot") argument to pass along additional arguments to .f each time itâ€™s called. For example, we can pass the trim argument to the mean() function:

map_dbl(df, mean, trim = 0.5)
  Multiple arguments can be passed along using commas to separate them. For example, we can also pass the na.rm argument to mean():

map_dbl(df, mean, trim = 0.5, na.rm = TRUE)
  You don't have to specify the arguments by name, but it is good practice!

You may be wondering why the arguments to map() are .x and .f and not x and f? It's because .x and .f are very unlikely to be argument names you might pass through the ..., thereby preventing confusion about whether an argument belongs to map() or to the function being mapped.


Example:

# Find the mean of each column
map_dbl(planes, mean)

# Find the mean of each column, excluding missing values
map_dbl(planes, mean, na.rm = TRUE)

# Find the 5th percentile of each column, excluding missing values
map_dbl(planes, quantile, probs = c(0.05), na.rm = TRUE)

-------------

Picking the right map function

Choosing the right map function is important. You can always use map(), which will return a list. However, if you know what type of output you expect, you are better to use the corresponding function. That way, if you expect one thing and get another, you'll know immediately because the map function will return an error.

# Find the columns that are numeric
    map_lgl(df3, is.numeric)

# Find the type of each column
    map_chr(df3, typeof)

# Find a summary of each column
    map(df3, summary)

-------------

Shortcuts for specifying .f

Shortcuts for specifying [[]] (i.e. subsets)

------
Example subsets

# Examine the structure of cyl
str(cyl)

# Extract the first element into four_cyls
four_cyls<- cyl[[1]]


# Fit a linear regression of mpg on wt using four_cyls
lm(mpg ~ wt, data = four_cyls)

------
# Examine the structure of cyl
> str(cyl)

List of 3
 $ 4:'data.frame':  11 obs. of  11 variables:
  ..$ mpg : num [1:11] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26 30.4 ...
  ..$ cyl : num [1:11] 4 4 4 4 4 4 4 4 4 4 ...
  ..$ disp: num [1:11] 108 146.7 140.8 78.7 75.7 ...
  ..$ hp  : num [1:11] 93 62 95 66 52 65 97 66 91 113 ...
  ..$ drat: num [1:11] 3.85 3.69 3.92 4.08 4.93 4.22 3.7 4.08 4.43 3.77 ...
  ..$ wt  : num [1:11] 2.32 3.19 3.15 2.2 1.61 ...
  ..$ qsec: num [1:11] 18.6 20 22.9 19.5 18.5 ...
  ..$ vs  : num [1:11] 1 1 1 1 1 1 1 1 0 1 ...
  ..$ am  : num [1:11] 1 0 0 1 1 1 0 1 1 1 ...
  ..$ gear: num [1:11] 4 4 4 4 4 4 3 4 5 5 ...
  ..$ carb: num [1:11] 1 2 2 1 2 1 1 1 2 2 ...
 $ 6:'data.frame':  7 obs. of  11 variables:
  ..$ mpg : num [1:7] 21 21 21.4 18.1 19.2 17.8 19.7
  ..$ cyl : num [1:7] 6 6 6 6 6 6 6
  ..$ disp: num [1:7] 160 160 258 225 168 ...
  ..$ hp  : num [1:7] 110 110 110 105 123 123 175
  ..$ drat: num [1:7] 3.9 3.9 3.08 2.76 3.92 3.92 3.62
  ..$ wt  : num [1:7] 2.62 2.88 3.21 3.46 3.44 ...
  ..$ qsec: num [1:7] 16.5 17 19.4 20.2 18.3 ...
  ..$ vs  : num [1:7] 0 0 1 1 1 1 0
  ..$ am  : num [1:7] 1 1 0 0 0 0 1
  ..$ gear: num [1:7] 4 4 3 3 4 4 5
  ..$ carb: num [1:7] 4 4 1 1 4 4 6
 $ 8:'data.frame':  14 obs. of  11 variables:
  ..$ mpg : num [1:14] 18.7 14.3 16.4 17.3 15.2 10.4 10.4 14.7 15.5 15.2 ...
  ..$ cyl : num [1:14] 8 8 8 8 8 8 8 8 8 8 ...
  ..$ disp: num [1:14] 360 360 276 276 276 ...
  ..$ hp  : num [1:14] 175 245 180 180 180 205 215 230 150 150 ...
  ..$ drat: num [1:14] 3.15 3.21 3.07 3.07 3.07 2.93 3 3.23 2.76 3.15 ...
  ..$ wt  : num [1:14] 3.44 3.57 4.07 3.73 3.78 ...
  ..$ qsec: num [1:14] 17 15.8 17.4 17.6 18 ...
  ..$ vs  : num [1:14] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ am  : num [1:14] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ gear: num [1:14] 3 3 3 3 3 3 3 3 3 3 ...
  ..$ carb: num [1:14] 2 4 3 3 3 4 4 4 2 2 ...
> 

> # Extract the first element into four_cyls

> four_cyls<- cyl[[1]]


> # Fit a linear regression of mpg on wt using four_cyls

> lm(mpg ~ wt, data = four_cyls)


Call:
lm(formula = mpg ~ wt, data = four_cyls)

Coefficients:
(Intercept)           wt  
     39.571       -5.647  


------------------------------------------------------
Using an anonymous function

Great! We now have a snippet of code that performs the operation we want on one data frame. One option would be to turn this into a function, for example:

fit_reg <- function(df) {
  lm(mpg ~ wt, data = df)
}
Then pass this function into map():

map(cyl, fit_reg)
But it seems a bit much to define a function for such a specific model when we only want to do this once. Instead of defining the function in the global environment, we will just use the function anonymously inside our call to map().

What does this mean? Instead of referring to our function by name in map(), we define it on the fly in the .f argument to map().


# Rewrite to call an anonymous function
FROM:
 function(df) lm(mpg ~ wt, data = df)

TO:
map(cyl, function(df) lm(mpg ~ wt, data = df))

OUTPUT:
> map(cyl, function(df) lm(mpg ~ wt, data = df))
$`4`

Call:
lm(formula = mpg ~ wt, data = df)

Coefficients:
(Intercept)           wt  
     39.571       -5.647  


$`6`

Call:
lm(formula = mpg ~ wt, data = df)

Coefficients:
(Intercept)           wt  
      28.41        -2.78  


$`8`

Call:
lm(formula = mpg ~ wt, data = df)

Coefficients:
(Intercept)           wt  
     23.868       -2.192  

-------------------------------------------------------
Using a formula

Writing anonymous functions takes a lot of extra key strokes, so purrr provides a shortcut that allows you to write an anonymous function as a one-sided formula instead.

In R, a one-sided formula starts with a ~, followed by an R expression. In purrr's map functions, the R expression can refer to an element of the .x argument using the . character.

Let's take a look at an example. Imagine, instead of a regression on each data frame in cyl, we wanted to know the mean displacement for each data frame. One way to do this would be to use an anonymous function:

map_dbl(cyl, function(df) mean(df$disp))

To perform the same operation using the formula shortcut, we replace the function definition (function(df)) with the ~, then when we need to refer to the element of cyl the function operates on (in this case df), we use a ..

map_dbl(cyl, ~ mean(.$disp))

See how much less typing it involves! It also saves you from coming up with an argument name. Can you rewrite our previous anonymous function using this formula shortcut instead?

FROM:
  map(cyl, function(df) lm(mpg ~ wt, data = df))

TO: 
  map(cyl, ~ lm(mpg ~ wt, .x))

-----------------------------------------------------------

Using a string

There are also some useful shortcuts that come in handy when you want to subset each element of the .x argument. If the .f argument to a map function is set equal to a string, let's say "name", then purrr extracts the "name" element from every element of .x.

This is a really common situation you find yourself in when you work with nested lists. For example, if we have a list of where every element contains an a and b element:

list_of_results <- list(
  list(a = 1, b = "A"), 
  list(a = 2, b = "C"), 
  list(a = 3, b = "D")
)

We might want to pull out the a element from every entry. We could do it with the string shortcut like this:

map(list_of_results, "a")

Now take our list of regresssion models:

map(cyl, ~ lm(mpg ~ wt, data = .))

It might be nice to extract the slope coefficient from each model. You'll do this in a few steps: first fit the models, then get the coefficients from each model using the coef() function, then pull out the wt estimate using the string shortcut.

# Save the result from the previous exercise to the variable models
models <-map(cyl, ~ lm(mpg ~ wt, data = .))



# Use map and coef to get the coefficients for each model: coefs
coefs<- map(models,"coefficients" )



# Use string shortcut to extract the wt coefficient 
   map(coefs, "wt")

OUTPUT

>    map(coefs, "wt")
$`4`
[1] -5.647025

$`6`
[1] -2.780106

$`8`
[1] -2.192438
> 
----------------------------------------------------

Using a numeric vector

Another useful shortcut for subetting is to pass a numeric vector as the .f argument. This works just like passing a string but subsets by index rather than name. For example, with your previous list_of_results:

list_of_results <- list(
  list(a = 1, b = "A"), 
  list(a = 2, b = "C"), 
  list(a = 3, b = "D")
)

Another way to pull out the a element from each list, is to pull out the first element:

map(list_of_results, 1)

Let's pull out the slopes from our models again, but this time using numeric subsetting. Also, since we are pulling out a single numeric value from each element, let's use map_dbl().


coefs <- map(models, coef)

# use map_dbl with the numeric shortcut to pull out the second element

map_dbl(coefs, 2)

----------------------------------------------------

PUTTING IT TOGETHER WITH PIPES %>%

purrr also includes a pipe operator: %>%. The pipe operator is another shortcut that saves typing, but also increases readability. The explanation of the pipe operator is quite simple: x %>% f(y) is another way of writing f(x, y). That is, the left hand side of the pipe, x, becomes the first argument to the function, f(), on the right hand side of the pipe.

Take a look at our code to get our list of models:

cyl <- split(mtcars, mtcars$cyl) 

map(cyl, ~ lm(mpg ~ wt, data = .))

We split the data frame mtcars and save it as the variable cyl. We then pass cyl as the first argument to map to fit the models. We could rewrite this using the pipe operator as:

split(mtcars, mtcars$cyl) %>% 
  map(~ lm(mpg ~ wt, data = .))

# We read this as "split the data frame mtcars on cyl, then use map() on the result."

# One of the powerful things about the pipe is we can chain together many operations. Here is our complete code, written with pipes, instead assigning each step to a variable and using it is the next step:

mtcars %>% 
  split(mtcars$cyl) %>%
  map(~ lm(mpg ~ wt, data = .)) %>%
  map(coef) %>% 
  map_dbl("wt")

We've written some code in the editor to pull out the R2R2 from each model. Rewrite the last two lines to use a pipe instead.

# Define models (don't change)
models <- mtcars %>% 
  split(mtcars$cyl) %>%
  map(~ lm(mpg ~ wt, data = .))

# Rewrite to be a single command using pipes 
map(models, summary) %>%
map_dbl("r.squared")

----------------------------------------------------





